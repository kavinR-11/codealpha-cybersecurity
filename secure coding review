import os
import re
import ast
from typing import List, Dict, Tuple
import argparse

class SecureCodeReviewer:
    def __init__(self):
        self.vulnerabilities = []
        self.checks = [
            ("SQL Injection", self.check_sql_injection),
            ("Hardcoded Secrets", self.check_hardcoded_secrets),
            ("Input Validation", self.check_input_validation),
            ("Password Storage", self.check_password_storage),
            ("Dangerous Functions", self.check_dangerous_functions)
        ]

    def analyze_file(self, file_path: str) -> List[Dict]:
        """Analyze a single Python file for vulnerabilities"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                tree = ast.parse(content)
                
                for check_name, check_func in self.checks:
                    issues = check_func(content, tree, file_path)
                    self.vulnerabilities.extend(issues)
                    
        except Exception as e:
            print(f"Error analyzing {file_path}: {str(e)}")
            
        return self.vulnerabilities

    def check_sql_injection(self, content: str, tree, file_path: str) -> List[Dict]:
        """Check for SQL injection vulnerabilities"""
        issues = []
        sql_patterns = [
            r"execute\(.*?\+\s*\w+\)",
            r"execute\(.*?%s.*?%\)",
            r"executemany\(.*?\+\s*\w+\)",
            r"cursor\.execute\(.*?f?\"\"\".*?\{\w+\}.*?\"\"\"\)",
            r"cursor\.execute\(.*?f?\'.*?\{\w+\}.*?\'\)"
        ]
        
        for node in ast.walk(tree):
            if isinstance(node, ast.Call):
                if hasattr(node.func, 'attr') and node.func.attr == 'execute':
                    for i, arg in enumerate(node.args):
                        if isinstance(arg, ast.BinOp) or (isinstance(arg, ast.JoinedStr)):
                            line_no = node.lineno
                            issues.append({
                                "type": "SQL Injection",
                                "file": file_path,
                                "line": line_no,
                                "severity": "Critical",
                                "description": "String concatenation in SQL query detected",
                                "recommendation": "Use parameterized queries or ORM"
                            })
        
        # Additional regex check for string patterns
        for i, line in enumerate(content.split('\n')):
            for pattern in sql_patterns:
                if re.search(pattern, line):
                    issues.append({
                        "type": "SQL Injection",
                        "file": file_path,
                        "line": i+1,
                        "severity": "Critical",
                        "description": "Potential SQL injection pattern detected",
                        "recommendation": "Use parameterized queries with ? or %s placeholders"
                    })
                    
        return issues

    def check_hardcoded_secrets(self, content: str, tree, file_path: str) -> List[Dict]:
        """Check for hardcoded credentials and secrets"""
        issues = []
        secret_patterns = [
            r'password\s*=\s*[\'\"].+?[\'\"]',
            r'api_key\s*=\s*[\'\"].+?[\'\"]',
            r'secret\s*=\s*[\'\"].+?[\'\"]',
            r'token\s*=\s*[\'\"].+?[\'\"]',
            r'aws_access_key_id\s*=\s*[\'\"].+?[\'\"]',
            r'aws_secret_access_key\s*=\s*[\'\"].+?[\'\"]'
        ]
        
        for i, line in enumerate(content.split('\n')):
            for pattern in secret_patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    if not any(exclude in line.lower() for exclude in ['example', 'placeholder', 'todo']):
                        issues.append({
                            "type": "Hardcoded Secret",
                            "file": file_path,
                            "line": i+1,
                            "severity": "High",
                            "description": "Hardcoded secret detected",
                            "recommendation": "Use environment variables or secret management system"
                        })
        return issues

    def check_input_validation(self, content: str, tree, file_path: str) -> List[Dict]:
        """Check for missing input validation"""
        issues = []
        flask_patterns = [
            r'request\.args\[[\'\"].+?[\'\"]\]',
            r'request\.form\[[\'\"].+?[\'\"]\]',
            r'request\.json\[[\'\"].+?[\'\"]\]',
            r'request\.values\[[\'\"].+?[\'\"]\]'
        ]
        
        for i, line in enumerate(content.split('\n')):
            for pattern in flask_patterns:
                if re.search(pattern, line):
                    # Check if there's any validation in nearby lines
                    validation_found = False
                    for j in range(max(0, i-3), min(len(content.split('\n')), i+3)):
                        if any(term in content.split('\n')[j].lower() for term in ['validate', 'check', 'sanitize', 'regex']):
                            validation_found = True
                            break
                    
                    if not validation_found:
                        issues.append({
                            "type": "Missing Input Validation",
                            "file": file_path,
                            "line": i+1,
                            "severity": "Medium",
                            "description": "Direct use of user input without validation",
                            "recommendation": "Implement proper input validation and sanitization"
                        })
        return issues

    def check_password_storage(self, content: str, tree, file_path: str) -> List[Dict]:
        """Check for insecure password storage"""
        issues = []
        insecure_patterns = [
            r'password\s*=\s*.+\.encode\(.*\)',
            r'hashlib\.md5\(.+\)',
            r'hashlib\.sha1\(.+\)',
            r'password\s*=\s*.+\[.*:.*\]'  # Simple slicing "encryption"
        ]
        
        for i, line in enumerate(content.split('\n')):
            for pattern in insecure_patterns:
                if re.search(pattern, line):
                    if 'bcrypt' not in line.lower() and 'argon2' not in line.lower():
                        issues.append({
                            "type": "Insecure Password Storage",
                            "file": file_path,
                            "line": i+1,
                            "severity": "Critical",
                            "description": "Potential insecure password handling detected",
                            "recommendation": "Use bcrypt, argon2 or PBKDF2 with proper salt"
                        })
        return issues

    def check_dangerous_functions(self, content: str, tree, file_path: str) -> List[Dict]:
        """Check for dangerous function calls"""
        issues = []
        dangerous_functions = [
            'eval',
            'exec',
            'pickle.loads',
            'marshal.loads',
            'os.system',
            'subprocess.call',
            'subprocess.Popen'
        ]
        
        for node in ast.walk(tree):
            if isinstance(node, ast.Call):
                if isinstance(node.func, ast.Name):
                    if node.func.id in dangerous_functions:
                        issues.append({
                            "type": "Dangerous Function",
                            "file": file_path,
                            "line": node.lineno,
                            "severity": "High",
                            "description": f"Use of dangerous function {node.func.id} detected",
                            "recommendation": f"Avoid using {node.func.id} with user input"
                        })
                elif isinstance(node.func, ast.Attribute):
                    full_name = f"{node.func.value.id}.{node.func.attr}" if hasattr(node.func.value, 'id') else node.func.attr
                    if full_name in dangerous_functions:
                        issues.append({
                            "type": "Dangerous Function",
                            "file": file_path,
                            "line": node.lineno,
                            "severity": "High",
                            "description": f"Use of dangerous function {full_name} detected",
                            "recommendation": f"Avoid using {full_name} with user input"
                        })
        return issues

    def generate_report(self, output_format: str = "text"):
        """Generate a security report"""
        if not self.vulnerabilities:
            print("No vulnerabilities found!")
            return
            
        if output_format == "text":
            print("\n=== Security Code Review Report ===")
            print(f"Total vulnerabilities found: {len(self.vulnerabilities)}")
            print("="*50)
            
            for vuln in self.vulnerabilities:
                print(f"\n[{vuln['severity']}] {vuln['type']}")
                print(f"File: {vuln['file']} (Line {vuln['line']})")
                print(f"Issue: {vuln['description']}")
                print(f"Recommendation: {vuln['recommendation']}")
                print("-"*50)
                
        elif output_format == "json":
            import json
            return json.dumps(self.vulnerabilities, indent=2)

def scan_directory(directory: str):
    """Scan all Python files in a directory"""
    reviewer = SecureCodeReviewer()
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                reviewer.analyze_file(file_path)
    return reviewer

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Python Secure Code Review Tool")
    parser.add_argument("path", help="Directory or file to analyze")
    parser.add_argument("--format", choices=["text", "json"], default="text", help="Output format")
    args = parser.parse_args()
    
    if os.path.isdir(args.path):
        reviewer = scan_directory(args.path)
    elif os.path.isfile(args.path):
        reviewer = SecureCodeReviewer()
        reviewer.analyze_file(args.path)
    else:
        print(f"Error: Path {args.path} not found")
        exit(1)
        
    report = reviewer.generate_report(args.format)
    if args.format == "json":
        print(report)
